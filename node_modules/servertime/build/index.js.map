{"version":3,"sources":["../src/index.js"],"names":["middleware","addToResponse","start","end","timeMiddleware","createTimer","CLOCKS","ms","Date","now","diff","hr","process","hrtime","seconds","nanos","Timer","options","_isDummy","isDummy","_clock","clock","_records","slug","label","console","error","record","time","undefined","promise","then","Object","keys","filter","map","join","req","res","next","devOnly","serverTiming","env","NODE_ENV","getHeader","setHeader","err"],"mappings":"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","file":"index.js","sourcesContent":["import onHeaders from 'on-headers';\n\nconst CLOCKS = {\n    ms: {\n        start() {return Date.now();},\n        diff(start) {return Date.now() - start;}\n    },\n    hr: {\n        start() {return process.hrtime();},\n        diff(start) {\n            const [seconds, nanos] = process.hrtime(start);\n            // Convert to milliseconds\n            return (seconds * 1000) + (nanos / 1000000);\n        }\n    }\n};\n\n\n/**\n * Keeps track of timing data for events and turns that data into a `server-timing` header.\n */\nclass Timer {\n    constructor(options={}) {\n        this._isDummy = options.isDummy;\n        this._clock = options.clock;\n        this._records = {};\n    }\n\n    /**\n     * Start timing an event.\n     * @param {string} slug - The slug to use for timing.  The same slug must be supplied to `end(slug)` in order\n     *   for this timing to show up in the final header.\n     * @param {string} [label] - Label to use in the server-timing header.\n     */\n    start(slug, label=null) {\n        if(this._isDummy) {return;}\n        if(this._records[slug]) {\n            console.error(`serverTime: Attempting to add slug we've already seen ${slug}`);\n        } else {\n            this._records[slug] = {\n                label: label || slug,\n                start: this._clock.start()\n            };\n        }\n    }\n\n    /**\n     * Stop timing an event.\n     * @param {string} slug - The slug to supplied to `start()`.\n     */\n    end(slug) {\n        if(this._isDummy) {return;}\n        const record = this._records[slug];\n        if(record) {\n            record.time = this._clock.diff(record.start);\n        }\n    }\n\n    /**\n     * Set the timing for an event.\n     * @param {string} slug - The slug to use for timing.\n     * @param {string} [label] - Label to use in the server-timing header.\n     * @param {number} ms - Time, in milliseconds.  Can be a float.\n     */\n    setTime(slug, label, ms) {\n        if(ms === undefined) {\n            ms = label;\n            label = null;\n        }\n\n        this._records[slug] = {\n            label: label || slug,\n            time: ms\n        };\n    }\n\n    /**\n     * Time the duration of a promise.\n     * @param {string} slug - The slug to use for timing.\n     * @param {string} [label] - Label to use in the server-timing header.\n     * @param {Promise} promise - The promise to time.\n     * @return {Promise} - Returns the passed in `promise`.\n     */\n    timePromise(slug, label, promise) {\n        if(!promise) {\n            promise = label;\n            label = slug;\n        }\n\n        if(!this._isDummy) {\n            this.start(slug, label);\n            promise.then(\n                () => this.end(slug),\n                () => this.end(slug)\n            );\n        }\n\n        return promise;\n    }\n\n    /**\n     * Return the server-timing header.\n     * @return {string} - The header.\n     */\n    getHeader() {\n        if(this._isDummy) {return null;}\n\n        return Object.keys(this._records)\n        // Filter out any results where we never called 'end'\n        .filter(slug => 'time' in this._records[slug])\n        .map(slug => `${slug}=${this._records[slug].time}; \"${this._records[slug].label}\"`)\n        .join(', ');\n    }\n}\n\n/**\n * Returns an express-style middleware that automatically adds `res.serverTiming` to the resposne object.\n *\n * @param  {Object} [options={}] - Options.\n * @param  {boolean} [options.devOnly=true] - If truthy, then only add a 'server-timing' header when NODE_ENV\n *   is not \"production\".  Server timing information can reveal a lot about your infrastructure to a potential\n *   attacker, so be careful with this.\n * @param  {string} [options.clock=hr] - The default is 'hr' which uses `process.hrtime()` to get nanosecond accuracy,\n *   but if you're on a platform that doesn't support `process.hrtime()` you can pass in 'ms' to use `Date.now()`\n *   instead.\n * @return {function} A `function(req, res, next)` express-style middleware.  Note that `next` is optional.\n */\nexport function middleware(options={}) {\n    return function(req, res, next) {\n        addToResponse(res, options);\n        if(next) {next();}\n    };\n}\n\n/**\n * Sets up a request to\n *\n * @param {http.ServerResponse} res - The resposne object.  `res.serverTiming` will be set to a new `Timer` object.\n *   `res.setHeader()` will automatically be called with the new header.\n * @param  {Object} [options={}] - Options.\n * @param  {boolean} [options.devOnly=true] - If truthy, then only add a 'server-timing' header when NODE_ENV\n *   is not \"production\".  Server timing information can reveal a lot about your infrastructure to a potential\n *   attacker, so be careful with this.\n * @param  {string} [options.clock] - The default is 'hr' which uses `process.hrtime()` to get nanosecond accuracy,\n *   but if you're on a platform that doesn't support `process.hrtime()` you can pass in 'ms' to use `Date.now()`\n *   instead.\n */\nexport function addToResponse(res, options={}) {\n    const devOnly = ('devOnly' in options) ? options.devOnly : true;\n    const clock = CLOCKS[options.clock || 'hr'];\n\n    // Don't add this twice.\n    if(res.serverTiming) {return;}\n\n    // If we're not in production, then do nothing.  Add a `dummy` serverTiming so caller code doesn't\n    // need to change.\n    if(devOnly && process.env.NODE_ENV === 'production') {\n        res.serverTiming = new Timer({isDummy: true, clock});\n        return;\n    }\n\n    res.serverTiming = new Timer({clock});\n\n    onHeaders(res, function() {\n        if(!this.getHeader('server-timing')) {\n            this.setHeader('server-timing', res.serverTiming.getHeader());\n        }\n    });\n}\n\n\n/**\n * Returns a mini-middleware that calls `res.serverTiming.start(slug, label)`.\n *\n * @param {string} slug - The slug to use for timing.  The same slug must be supplied to `end(slug)` in order\n *   for this timing to show up in the final header.\n * @param {string} [label] - Label to use in the server-timing header.\n * @return {function} - Middleware function.\n */\nexport function start(slug, label=null) {\n    return (req, res, next) => {\n        res.serverTiming.start(slug, label);\n        if(next) {next();}\n    };\n}\n\n/**\n * Returns a mini-middleware that calls `res.serverTiming.end(slug, label)`.\n *\n * @param {string} slug - The slug to supplied to `start()`.\n * @return {function} - Middleware function.\n */\nexport function end(slug) {\n    return (req, res, next) => {\n        res.serverTiming.end(slug);\n        if(next) {next();}\n    };\n}\n\n/**\n * Wraps a middleware and adds timing data for it to the server-timing header.\n *\n * @param {string} slug - The slug to use for timing.\n * @param {string} [label] - Label to use in the server-timing header.\n * @param {function} middleware - The `fn(req, res, next)` function to time.  Note that the function must call\n *   `next()` in order to be timed.\n * @return {function} - Middleware function.\n */\nexport function timeMiddleware(slug, label, middleware) {\n    if(!middleware) {\n        middleware = label;\n        label = slug;\n    }\n\n    return (req, res, next) => {\n        res.serverTiming.start(slug, label);\n        middleware(req, res, err => {\n            res.serverTiming.end(slug);\n            next(err);\n        });\n    };\n}\n\n/**\n * Create a new Timer object.\n * @param  {object} [options={}] - Options.\n * @param  {string} [options.clock=hr] - The default is 'hr' which uses `process.hrtime()` to get nanosecond accuracy,\n *   but if you're on a platform that doesn't support `process.hrtime()` you can pass in 'ms' to use `Date.now()`\n *   instead.\n * @return {Timer} - New Timer object.\n */\nexport function createTimer(options={}) {\n    const clock = CLOCKS[options.clock || 'hr'];\n    return new Timer({clock});\n}\n"]}